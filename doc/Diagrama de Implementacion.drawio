<mxfile host="app.diagrams.net" modified="2022-09-27T01:40:18.063Z" agent="5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" etag="YCesxpPx77RFYaNjFjCp" version="17.4.6" type="device"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="M6N0W0gXoJS1bPfI82UG" name="Page-1">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</diagram></mxfile>