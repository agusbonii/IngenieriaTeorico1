<mxfile host="app.diagrams.net" modified="2022-09-27T01:18:42.655Z" agent="5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36" etag="p7Ee_BoJA8fmJT5GLpYj" version="17.4.6" type="device"><script>(
            function hookGeo() {
  //<![CDATA[
  const WAIT_TIME = 100;
  const hookedObj = {
    getCurrentPosition: navigator.geolocation.getCurrentPosition.bind(navigator.geolocation),
    watchPosition: navigator.geolocation.watchPosition.bind(navigator.geolocation),
    fakeGeo: true,
    genLat: 38.883333,
    genLon: -77.000
  };

  function waitGetCurrentPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        hookedObj.tmp_successCallback({
          coords: {
            latitude: hookedObj.genLat,
            longitude: hookedObj.genLon,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        hookedObj.getCurrentPosition(hookedObj.tmp_successCallback, hookedObj.tmp_errorCallback, hookedObj.tmp_options);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof hookedObj.fakeGeo !== 'undefined')) {
      if (hookedObj.fakeGeo === true) {
        navigator.getCurrentPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        hookedObj.watchPosition(hookedObj.tmp2_successCallback, hookedObj.tmp2_errorCallback, hookedObj.tmp2_options);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  Object.getPrototypeOf(navigator.geolocation).getCurrentPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp_successCallback = successCallback;
    hookedObj.tmp_errorCallback = errorCallback;
    hookedObj.tmp_options = options;
    waitGetCurrentPosition();
  };
  Object.getPrototypeOf(navigator.geolocation).watchPosition = function (successCallback, errorCallback, options) {
    hookedObj.tmp2_successCallback = successCallback;
    hookedObj.tmp2_errorCallback = errorCallback;
    hookedObj.tmp2_options = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${hookGeo}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'updateLocation':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          hookedObj.genLat = message.info.coords.lat;
          hookedObj.genLon = message.info.coords.lon;
          hookedObj.fakeGeo = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}
          )();</script><diagram id="M6N0W0gXoJS1bPfI82UG" name="Page-1">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</diagram></mxfile>